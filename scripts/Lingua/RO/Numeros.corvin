#!/usr/bin/ruby

# AUTHOR: Daniel "Trizen" Șuteu
# LICENSE: GPLv3

# Această funcție sterge diacritcile românești dintr-un string dat
func _remove_diacritics(s) {
    s.tr('ăâșțî','aasti');
}

# Numere  => text
var DIGITS = Dict.new;
DIGITS['0'..'19'] = %w(
  zero unu doi trei patru cinci șase șapte opt nouă zece
  unsprezece
  doisprezece
  treisprezece
  paisprezece
  cincisprezece
  șaisprezece
  șaptesprezece
  optsprezece
  nouăsprezece
);

# Text => numbers
var WORDS = Dict.new;
WORDS[DIGITS.values.map {|v|_remove_diacritics(v)}] = DIGITS.keys.map{.to_num};
WORDS[%w(o un doua sai)] = [1, 1, 2, 6];

# Colocvial
WORDS[%w(unspe doispe treispe paispe cinspe cinsprezece saispe saptespe saptuspe optspe nouaspe)] =
    [11, 12, 13, 14, 15, 15, 16, 17, 17, 18, 19];

# Această listă conține numere mai mari de 99
# Vezi: http://ro.wikipedia.org/wiki/Sistem_zecimal#Denumiri_ale_numerelor
var BIGNUMS = (
            [
                [ 10**2,        'suta',         'sute', adev],
                [ 10**3,         'mie',          'mii', adev],
                [ 10**6,      'milion',     'milioane', fals],
                [ 10**9,     'miliard',     'miliarde', fals],
                [10**12,      'bilion',     'bilioane', fals],
                [10**15,     'biliard',     'biliarde', fals],
                [10**18,     'trilion',    'trilioane', fals],
                [10**21,    'triliard',    'triliarde', fals],
                [10**24,  'cvadrilion', 'cvadrilioane', fals],
                [10**27, 'cvadriliard', 'cvadriliarde', fals],
                [Mate.inf,  'inifinit',      'infinit', fals],
            ]
             -> map { |v|
                 (var h = Dict.new)[%w(num sg pl fem)] = (v) => h;
            }
);

# This hash is a reversed version of the above array and it's used to convert text into numbers
static BIGWORDS = Dict.new;
BIGNUMS.each { |x|
    BIGWORDS[x[:sg],x[:pl]] = [x[:num],x[:num]];
};

# Change 'suta' to 'sută'
BIGNUMS[0][:sg] = 'sută';

# This functions removes irrelevant characters from a text
    func _normalize_text(s) {

        # Lowercase and remove the diacritics
        var text = _remove_diacritics(s.lc);

        # Replace irrelevant characters with a space
        return text.tr('a-z', ' ', 'c');
    }

    # This function adds together a list of numbers
    func _add_numbers(nums) {

        var num = 0;
        cat_timp (nums.len?) {
            var i = nums.shift;

            # When the current number is lower than the next number
            daca (nums.len? && (i < nums[0])) {
                var n = nums.shift;

                # Factor (e.g.: 400 -> 4)
                var f = (i / (10**(i.log10.int)) -> int);

                # When the next number is not really next to the current number
                # e.g.: $i == 400 and $n == 5000 # should produce 405_000 not 45_000
                daca ((var mod = (n.len % 3)) != 0) {
                    f *= 10**(3 - mod);
                }

                # Join the numbers and continue
                num += (10**(n.log10.int) * f + n);
                sari;
            }

            num += i;
        }

        return num;
    }

clasa nou(diacritice            = adev,
          numar_invalid         = nul,
          semn_negativ          = 'minus',
          punct_decimal         = 'virgulă',
          separator             = '',
          infinit               = 'infinit',
          nu_e_numar            = 'NaN') {

    # This function converts a Romanian
    # text-number into a mathematical number.
    metoda in_cifre(text) {

        # When text is not a string
        text.is_a(String) || return;

        # If a thousand separator is defined, remove it from text
        daca ((separator != '') && (separator.lungime > 1)) {
            text.gsub!(separator, ' ');
        }

        # Split the text into words
        var words = _normalize_text(text).words;

        var dec_point = _normalize_text(punct_decimal);
        var neg_sign  = _normalize_text(semn_negativ);

        var nums = [];    # numbers
        var decs = [];    # decimal numbers

        var neg  = fals;    # bool -- true when the number is negative
        var adec = fals;    # bool -- true after the decimal point

        var amount = 0;  # int -- current number
        var factor = 1;  # int -- multiplication factor

        daca (words.len?) {

            # Check for negative numbers
            daca (words[0] == neg_sign) {
                neg = true;
                words.shift;
            }

            # Check for infinity and NaN
            daca (words.len == 1) {

                # Infinity
                var inf = _normalize_text(infinit);
                daca (words[0] == inf) {
                    return(neg ? Math.inf.neg : Math.inf);
                }

                # Not a number
                var nan = _normalize_text(nu_e_numar);
                daca (words[0] == nan) {
                    return Num.nan;
                }
            }
        }

        # Iterate over the @words
        cat_timp {words.len? && (
                # It's a small number (lower than 100)
                (factor = (WORDS.exists(words[0]) ? 1 : (words[0].ends_with('zeci') ? (words[0].sub!(/zeci\z/); 10) : 0));
                factor > 0 && (amount = words.shift);
                factor > 0)
                || (( # It's a big number (e.g.: milion)
                words.len? && (BIGWORDS.exists(words[0]) && (
                    factor = BIGWORDS[words.shift];
                    factor > 0;
                )))
                || (    # Ignore invalid words
                    words.shift;
                    __BLOC__.run;
                )
            ))} {

            # Take and multiply the current number
            var num = (WORDS.exists(amount) ? (WORDS[amount] * factor) : sari);    # skip invalid words

            # Check for some word-joining tokens
            daca (words.len?) {
                daca (words[0] == 'si') {    # e.g.: patruzeci si doi
                    words.shift;
                    num += WORDS[words.shift];
                }

                daca (words.len?) {
                    loop {
                        daca (words[0] == 'de') {    # e.g.: o suta de mii
                            words.shift;
                        }

                        daca (BIGWORDS.exists(words[0])) {
                            num *= BIGWORDS[words.shift];
                        }

                        toate {words.len?; words[0] == 'de'} || stop;
                    };
                }
            }

            # If we are after the decimal point, store the
            # numbers in @decs, otherwise store them in @nums.
            [nums,decs][adec].push(num);

            # Check for the decimal point
            daca (words.len? && (words[0] == dec_point)) {
                adec = adev;
                words.shift;
            }
        }

        # Return undef when no number has been converted
        nums.len? || return;

        # Add all the numbers together (if any)
        var num = _add_numbers(nums).to_s;

        # If the number contains decimals,
        # add them at the end of the number
        daca (decs.len?) {

            # Special case -- check for leading zeros
            var zeros = '';
            cat_timp (decs.len? && (decs[0] == 0)) {
                zeros += decs.shift.to_s;
            }

            num += ('.' + zeros + _add_numbers(decs).to_s);
        }

        # Return the number
        return(neg ? num.to_num.neg : num.to_num);
    }

    metoda _number_to_ro(number) {

        var words = [];
        daca (DIGITS.exists(number)) {
            words.append(DIGITS[number]);
        }
        altdaca (number.to_num! -> nu_e_numar) {
            return [nu_e_numar];
        }
        altdaca (number.e_negativ) {
            words.append(semn_negativ);
            words.append(__METODA__(self, number.abs)...);
        }
        altdaca (!(number.e_intreg)) {

            words.append(__METODA__(self, number.int)...);
            words.append(punct_decimal);

            number -= (number.int);

            cat_timp (number != (number.int)) {
                number *= 10
                    < 1 && (words.append(DIGITS[0]));
            }

            words.append(__METODA__(self, number.int)...);
        }
        altdaca (number >= BIGNUMS[0]['num']) {
            0 ... BIGNUMS.sfarsit-1 -> each { |i|
                var j = BIGNUMS.sfarsit-i;

                daca (number >= BIGNUMS[j-1]['num'] && (number < BIGNUMS[j]['num'])) {
                    var cat = (number / BIGNUMS[j-1]['num'] -> int);
                    number -= (BIGNUMS[j-1]['num'] * (number / BIGNUMS[j-1]['num'] -> int));

                    var of = (cat <= 2 ? [] : (
                        var w = (
                            DIGITS.exists(cat)
                                ? [DIGITS[cat]]
                                : (__METODA__(self, cat) + ['de'])
                            ) -> len > 2 && (w[-2] == DIGITS[2] && (w[-2] = 'două'));
                       w;
                    ));

                    daca (cat >= 100 && (cat < 1000)) {
                        var rest = (cat - (100 * (cat / 100 -> int)));
                        daca (of.len != 0 && (rest != 0 && (DIGITS.exists(rest)))) {
                            of.dropRight(1);
                        }
                    }

                    words += (
                        cat == 1 ? ([BIGNUMS[j-1]['fem'] ? 'o' : 'un', BIGNUMS[j-1]['sg']])
                                 : (cat == 2 ? (['două', BIGNUMS[j-1]['pl']])
                                             : (of + [BIGNUMS[j-1]['pl']]));
                    );

                    number > 0 && (
                        BIGNUMS[j]['num'] > 1000 && (
                            words[-1] += separator
                        );
                        words.append(__METODA__(self, number)...)
                    );

                    stop;
                }
            }
        }
        altdaca (number > 19 && (number < 100)) {
            var cat = (number / 10 -> int);

            words.append(
                (
                 cat == 2 ? 'două'
                          : (
                             cat == 6 ? ('șai')
                                      : (DIGITS[cat])
                            )
                ) + 'zeci'
            );

            daca (number % 10 != 0) {
                words.append('și', DIGITS[number % 10 -> int]);
            }
        }
        altdaca (number.e_infinit) {
            return [infinit];
        }
        altfel {
            return [numar_invalid];
        }

        return words;
    }

    metoda in_litere(num) {
        var word = self._number_to_ro(num).join(" ");

        daca (!diacritice) {
            word = _remove_diacritics(word);
        }

        return word;
    }
}
